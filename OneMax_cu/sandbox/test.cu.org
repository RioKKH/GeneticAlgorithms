#include <stdio.h>
#include <cuda_runtime.h>
#include <helper_functions.h>
#include <helper_cuda.h>

__global__ void gpukernel1(int N, float* C, float* A)
{
	for (int i = 0; i < N; i++) {
		C[i] = A[i];
		printf("%d\n", i);
	}
}

__global__ void gpukernel2(int N, float* C)
{
	for (int i = 0; i < N; i++) {
		printf("gpuKernel2 %d, %d, %d, %f\n",
				threadIdx.x, blockIdx.x, blockDim.x, C[i]);
	}
}

int main(int argc, char** argv) {
	float *h_A, *h_C;
	float *d_A, *d_C;
	h_A = (float*)malloc(sizeof(float)*N);
	h_C = (float*)malloc(sizeof(float)*N);
	for (int i = 0; i < N; i++) {
		h_A[i] = (float)i;
		h_C[i] = 0.0f;
	}
	cudaMalloc((void**)&d_A, sizeof(float) * N);
	cudaMalloc((void**)&d_C, sizeof(float) * N);
	cudaMemcpy(d_A, h_A, sizeof(float)*N, cudaMemcpyHostToDevice);
	cudaMemcpy(d_C, h_C, sizeof(float)*N, cudaMemcpyHostToDevice);
	gpukernel1<<<1, 256>>>(N, d_C, d_A);
	cudaDeviceSynchronize();
	gpukernel2<<<12, 12>>>(N, d_C);
	cudaMemcpy(h_C, d_C, sizeof(float)*N, cudaMemcpyDeviceToHost);
	for (int i = 0; i < N; i++) {
		printf("%f\n", h_C[i]);
	}
	cudaFree(d_A);
	cudaFree(d_C);
	free(h_A);
	free(h_C);
	
	return 0;
}

